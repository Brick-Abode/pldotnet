# avoids tzdata prompt
export DEBIAN_FRONTEND=noninteractive

apt_update:
	echo "# ENVIRONMENT SETUP: running $@"
	apt-get update

add_dotnet: apt_update
	echo "# ENVIRONMENT SETUP: running $@"
	wget -q \
		https://packages.microsoft.com/config/$(shell lsb_release -i | cut -f2 -d'	' | sed 's/.*/\L&/')/$(shell lsb_release -r | cut -f2 -d'	')/packages-microsoft-prod.deb \
		-O packages-microsoft-prod.deb
	dpkg -i packages-microsoft-prod.deb
	apt-get update

install_dotnet_deb: add_dotnet
	echo "# ENVIRONMENT SETUP: running $@"
	apt install -y dotnet-sdk-6.0
	apt install -y dotnet-runtime-6.0
	apt install -y dotnet-hostfxr-6.0
	apt install -y debhelper

install_dotnet_ubuntu: add_dotnet
	echo "# ENVIRONMENT SETUP: running $@"
	apt install -y dotnet-hostfxr-6.0=6.0.8-1
	apt install -y dotnet-runtime-6.0=6.0.8-1
	apt install -y dotnet-sdk-6.0=6.0.400-1

install_requirements: apt_update
	echo "# ENVIRONMENT SETUP: running $@"
	apt install -y wget
	apt install -y libglib2.0-dev
	apt install -y apt-transport-https
	apt install -y lsb-release
	apt install -y build-essential
	apt install -y apt-utils
	apt install -y pkg-config
	apt install -y clang-11

install_pg_dev: install_requirements install_misc
	# installs postgresql dev packages
	echo "# ENVIRONMENT SETUP: running $@"
	apt install -y postgresql
	apt install -y postgresql-common
	apt install -y postgresql-server-dev-all
	apt install -y devscripts

install_misc:
	# installs miscellaneous commands for convenience
	echo "# ENVIRONMENT SETUP: running $@"
	apt install -y sudo
	apt install -y vim
	apt install -y cdecl
	apt install -y strace
	apt install -y doxygen
	apt install -y graphviz

install_cluster_requirements: install_misc
	# cluster creation requirements; locale settings
	echo "# ENVIRONMENT SETUP: running $@"
	apt install -y locales
	apt install -y rsync
	sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
	locale-gen

create_cluster_and_install_extension:
	# creating persistent cluster and installing extension
	echo "# ENVIRONMENT SETUP: running $@"
	bash /app/pldotnet/docker/scripts/create_pg_cluster.sh
	bash /app/pldotnet/docker/scripts/start_pg_cluster.sh
	bash /app/pldotnet/docker/scripts/install_make.sh
	service postgresql stop
	rsync -a ${PGDATA}/* /var/lib/postgresql/pgnet_backup_cluster

install_pls:
	echo "# Installing plpython..."
	apt install -y postgresql-plpython3-14

	echo "# Installing pljava..."
	apt-get install -y default-jre
	apt-get install -y default-jdk
	apt-get install -y maven
	apt-get install -y libecpg-dev
	apt-get install -y libkrb5-dev
	cd .. && git clone --branch  V1_6_6 --single-branch https://github.com/tada/pljava.git && cd pljava && \
		mvn clean install && java -jar pljava-packaging/target/pljava-pg14.jar

	echo "# Installing pllua..."
	apt install -y liblua5.3-0
	apt install -y postgresql-14-pllua

	echo "# Installing plperl..."
	apt install -y postgresql-plperl-14

	echo "# Installing plr..."
	apt install -y postgresql-14-plr

	echo "# Installing tcl..."
	apt install -y postgresql-pltcl-14

	echo "# Installing plv8"
	apt-get install -y git
	apt-get install -y cmake
	cd .. && git clone --branch v3.2.2 --single-branch https://github.com/plv8/plv8.git && cd plv8 && \
		make && make install

install_python_packages:
	apt install -y python3-pip
	pip3 install pandas psycopg2 tabulate cpplint

# these targets correspond to the original Dockerfiles which this Makefile replaces
deb_build: install_pg_dev install_dotnet_deb
ubuntu22_install: install_pg_dev install_dotnet_ubuntu install_pls install_python_packages
